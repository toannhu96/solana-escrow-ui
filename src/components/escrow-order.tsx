/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/LIoy4WuHW1J
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import AnchorEscrowProgram from "@/lib/anchor_escrow";
import WalletConnection from "@/components/WalletConnection";
import { TOKEN_2022_PROGRAM_ID, AccountLayout } from "@solana/spl-token";
import { useWallet } from "@solana/wallet-adapter-react";
import { PublicKey } from "@solana/web3.js";
import useAnchorProvider from "@/hooks/use-anchor-provider";
import { useForm } from "react-hook-form";
import { useToast } from "@/components/ui/use-toast";
import { BN } from "@coral-xyz/anchor";
import { cn } from "@/lib/utils";

export function EscrowOrder() {
  const wallet = useWallet();
  const provider = useAnchorProvider();
  const [orders, setOrders] = useState([]);
  const [tokensHolding, setTokensHolding] = useState([]);
  const { toast } = useToast();
  const {
    register,
    watch,
    handleSubmit,
    formState: { errors },
  } = useForm();

  useEffect(() => {
    if (!wallet.publicKey) {
      return;
    }

    const program = new AnchorEscrowProgram(provider.connection);
    program.getOrders().then((orders) => {
      setOrders(orders);
    });

    getTokenHoldings(wallet.publicKey).then((tokens) => {
      setTokensHolding(tokens);
    });
  }, [wallet.publicKey]);

  const signMakeEscrow = async (data: any) => {
    try {
      if (wallet.publicKey) {
        const program = new AnchorEscrowProgram(provider.connection);
        const tx = await program.make(
          wallet.publicKey,
          new PublicKey(data.mintA),
          new PublicKey(data.mintB),
          data.depositAmount,
          data.withdrawAmount
        );
        const signature = await provider.sendAndConfirm(tx);
        console.log({ tx, signature });
        toast({
          className: cn(
            "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
          ),
          variant: "success",
          title: "Success",
          description: (
            <>
              Escrow order created successfully.
              <Button variant="link">
                <a
                  target="_blank"
                  href={`https://explorer.solana.com/tx/${signature}?cluster=devnet`}
                >
                  View Txn
                </a>
              </Button>
            </>
          ),
        });
        return signature;
      }
    } catch (error: any) {
      console.log(error);
      toast({
        className: cn(
          "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
        ),
        variant: "destructive",
        title: "Error",
        description:
          "An error occurred while creating the escrow order. Please try again.",
      });
    }
  };

  const signRefundEscrow = async (mintA: PublicKey, seed: BN) => {
    try {
      if (wallet.publicKey) {
        const program = new AnchorEscrowProgram(provider.connection);
        const tx = await program.refund(wallet.publicKey, mintA, seed);
        const signature = await provider.sendAndConfirm(tx);
        console.log({ tx, signature });
        toast({
          className: cn(
            "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
          ),
          variant: "success",
          title: "Success",
          description: (
            <>
              Escrow order refunded successfully.
              <Button variant="link">
                <a
                  target="_blank"
                  href={`https://explorer.solana.com/tx/${signature}?cluster=devnet`}
                >
                  View Txn
                </a>
              </Button>
            </>
          ),
        });
        return signature;
      }
    } catch (error: any) {
      console.log(error);
      toast({
        className: cn(
          "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
        ),
        variant: "destructive",
        title: "Error",
        description:
          "An error occurred while refund the escrow order. Please try again.",
      });
    }
  };

  const signTakeEscrow = async (
    maker: PublicKey,
    mintA: PublicKey,
    mintB: PublicKey,
    seed: BN
  ) => {
    try {
      if (wallet.publicKey) {
        const program = new AnchorEscrowProgram(provider.connection);
        const tx = await program.take(
          maker,
          wallet.publicKey,
          mintA,
          mintB,
          seed
        );
        const signature = await provider.sendAndConfirm(tx);
        console.log({ tx, signature });
        toast({
          className: cn(
            "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
          ),
          variant: "success",
          title: "Success",
          description: (
            <>
              Escrow order taken successfully.
              <Button variant="link">
                <a
                  target="_blank"
                  href={`https://explorer.solana.com/tx/${signature}?cluster=devnet`}
                >
                  View Txn
                </a>
              </Button>
            </>
          ),
        });
        return signature;
      }
    } catch (error: any) {
      console.log(error);
      toast({
        className: cn(
          "top-0 right-0 flex fixed md:max-w-[420px] md:top-4 md:right-4"
        ),
        variant: "destructive",
        title: "Error",
        description:
          "An error occurred while taking the escrow order. Please try again.",
      });
    }
  };

  const getTokenHoldings = async (owner: PublicKey) => {
    const tokenAccounts = await provider.connection.getTokenAccountsByOwner(
      owner,
      {
        programId: TOKEN_2022_PROGRAM_ID,
      }
    );

    const tokenHoldings = await Promise.all(
      tokenAccounts.value.flatMap(async (accountInfo) => {
        const accountData = AccountLayout.decode(accountInfo.account.data);
        const tokenPublicKey = new PublicKey(accountData.mint);
        const amount = accountData.amount;
        if (amount.toString() === "0") {
          return [];
        }

        return { mint: tokenPublicKey.toBase58(), amount: amount.toString() };
      })
    );

    return tokenHoldings;
  };

  return (
    <div>
      <header className="bg-primary shadow-md">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="text-2xl font-bold text-primary-foreground">
            Solana Escrow
          </div>
          <nav>
            <ul className="flex space-x-4">
              <li>
                <WalletConnection />
              </li>
            </ul>
          </nav>
        </div>
      </header>
      <main>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto p-4">
          <div className="bg-background rounded-lg shadow-lg p-6">
            <h2 className="text-2xl font-bold mb-4">Maker</h2>
            <form
              className="grid gap-4"
              onSubmit={handleSubmit(signMakeEscrow)}
            >
              <div className="grid gap-2">
                <Label htmlFor="depositToken">Deposit Token</Label>
                <select
                  id="depositToken"
                  className="block w-full p-3 text-sm text-opacity-75 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  {...register("mintA", { required: true })}
                >
                  <option selected value="" disabled hidden>
                    Select token
                  </option>
                  {tokensHolding.map((token) => {
                    return (
                      <option key={token.mint} value={token.mint}>
                        {token.mint}
                      </option>
                    );
                  })}
                </select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="depositAmount">Deposit Amount</Label>
                <Input
                  {...register("depositAmount", { required: true })}
                  id="depositAmount"
                  type="number"
                  placeholder="Enter amount"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="withdrawToken">Withdraw Token</Label>
                <select
                  id="withdrawToken"
                  className="block w-full p-3 text-sm text-opacity-75 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  {...register("mintB", { required: true })}
                >
                  <option selected value="" disabled hidden>
                    Select token
                  </option>
                  {tokensHolding.map((token) => {
                    return (
                      <option key={token.mint} value={token.mint}>
                        {token.mint}
                      </option>
                    );
                  })}
                </select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="withdrawAmount">Withdraw Amount</Label>
                <Input
                  {...register("withdrawAmount", { required: true })}
                  id="withdrawAmount"
                  type="number"
                  placeholder="Enter amount"
                />
              </div>
              <Button type="submit">Create Order</Button>
            </form>
          </div>
          <div className="bg-background rounded-lg shadow-lg p-6">
            <h2 className="text-2xl font-bold mb-4">Taker</h2>
            <div className="grid gap-4">
              {orders.map((order, index) => {
                return (
                  <Card key={index}>
                    <CardHeader>
                      <CardTitle>
                        Order #
                        {order.account.maker
                          .toBase58()
                          .substring(0, 16)
                          .concat("...")}
                      </CardTitle>
                      <CardDescription>
                        Deposit Token:{" "}
                        {order.account.mintB
                          .toBase58()
                          .substring(0, 16)
                          .concat("...")}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center">
                        <div>
                          Deposit Amount: {order.account.receive.toString()}
                        </div>
                        <Button
                          onClick={(e) => {
                            e.preventDefault();
                            if (wallet.publicKey === order.account.maker) {
                              signRefundEscrow(
                                order.account.mintA,
                                new BN(order.account.seed.toString())
                              );
                              return;
                            }
                            signTakeEscrow(
                              order.account.maker,
                              order.account.mintA,
                              order.account.mintB,
                              new BN(order.account.seed.toString())
                            );
                          }}
                        >
                          {wallet.publicKey?.toBase58() ==
                          order.account.maker.toBase58()
                            ? "Refund"
                            : "Take Order"}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        </div>
      </main>
      <footer className="bg-muted text-muted-foreground py-6 flex justify-center fixed bottom-0 w-full">
        <div>&copy; 2024 Toan Nhu. All rights reserved.</div>
      </footer>
    </div>
  );
}
